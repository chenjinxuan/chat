// Code generated by protoc-gen-go. DO NOT EDIT.
// source: chat.proto

package proto

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Chat_FrameType int32

const (
	Chat_Ping    Chat_FrameType = 0
	Chat_Message Chat_FrameType = 1
	Chat_Kick    Chat_FrameType = 2
)

var Chat_FrameType_name = map[int32]string{
	0: "Ping",
	1: "Message",
	2: "Kick",
}

var Chat_FrameType_value = map[string]int32{
	"Ping":    0,
	"Message": 1,
	"Kick":    2,
}

func (x Chat_FrameType) String() string {
	return proto.EnumName(Chat_FrameType_name, int32(x))
}

func (Chat_FrameType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_8c585a45e2093e54, []int{0, 0}
}

type Chat struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Chat) Reset()         { *m = Chat{} }
func (m *Chat) String() string { return proto.CompactTextString(m) }
func (*Chat) ProtoMessage()    {}
func (*Chat) Descriptor() ([]byte, []int) {
	return fileDescriptor_8c585a45e2093e54, []int{0}
}

func (m *Chat) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Chat.Unmarshal(m, b)
}
func (m *Chat) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Chat.Marshal(b, m, deterministic)
}
func (m *Chat) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Chat.Merge(m, src)
}
func (m *Chat) XXX_Size() int {
	return xxx_messageInfo_Chat.Size(m)
}
func (m *Chat) XXX_DiscardUnknown() {
	xxx_messageInfo_Chat.DiscardUnknown(m)
}

var xxx_messageInfo_Chat proto.InternalMessageInfo

type Chat_Frame struct {
	Type                 Chat_FrameType `protobuf:"varint,1,opt,name=Type,proto3,enum=proto.Chat_FrameType" json:"Type,omitempty"`
	Message              []byte         `protobuf:"bytes,2,opt,name=Message,proto3" json:"Message,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *Chat_Frame) Reset()         { *m = Chat_Frame{} }
func (m *Chat_Frame) String() string { return proto.CompactTextString(m) }
func (*Chat_Frame) ProtoMessage()    {}
func (*Chat_Frame) Descriptor() ([]byte, []int) {
	return fileDescriptor_8c585a45e2093e54, []int{0, 0}
}

func (m *Chat_Frame) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Chat_Frame.Unmarshal(m, b)
}
func (m *Chat_Frame) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Chat_Frame.Marshal(b, m, deterministic)
}
func (m *Chat_Frame) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Chat_Frame.Merge(m, src)
}
func (m *Chat_Frame) XXX_Size() int {
	return xxx_messageInfo_Chat_Frame.Size(m)
}
func (m *Chat_Frame) XXX_DiscardUnknown() {
	xxx_messageInfo_Chat_Frame.DiscardUnknown(m)
}

var xxx_messageInfo_Chat_Frame proto.InternalMessageInfo

func (m *Chat_Frame) GetType() Chat_FrameType {
	if m != nil {
		return m.Type
	}
	return Chat_Ping
}

func (m *Chat_Frame) GetMessage() []byte {
	if m != nil {
		return m.Message
	}
	return nil
}

func init() {
	proto.RegisterEnum("proto.Chat_FrameType", Chat_FrameType_name, Chat_FrameType_value)
	proto.RegisterType((*Chat)(nil), "proto.Chat")
	proto.RegisterType((*Chat_Frame)(nil), "proto.Chat.Frame")
}

func init() { proto.RegisterFile("chat.proto", fileDescriptor_8c585a45e2093e54) }

var fileDescriptor_8c585a45e2093e54 = []byte{
	// 175 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4a, 0xce, 0x48, 0x2c,
	0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x05, 0x53, 0x4a, 0x4d, 0x8c, 0x5c, 0x2c, 0xce,
	0x19, 0x89, 0x25, 0x52, 0x3e, 0x5c, 0xac, 0x6e, 0x45, 0x89, 0xb9, 0xa9, 0x42, 0x9a, 0x5c, 0x2c,
	0x21, 0x95, 0x05, 0xa9, 0x12, 0x8c, 0x0a, 0x8c, 0x1a, 0x7c, 0x46, 0xa2, 0x10, 0xe5, 0x7a, 0x20,
	0x35, 0x7a, 0x60, 0x05, 0x20, 0xc9, 0x20, 0xb0, 0x12, 0x21, 0x09, 0x2e, 0x76, 0xdf, 0xd4, 0xe2,
	0xe2, 0xc4, 0xf4, 0x54, 0x09, 0x26, 0x05, 0x46, 0x0d, 0x9e, 0x20, 0x18, 0x57, 0x49, 0x87, 0x8b,
	0x13, 0xae, 0x58, 0x88, 0x83, 0x8b, 0x25, 0x20, 0x33, 0x2f, 0x5d, 0x80, 0x41, 0x88, 0x1b, 0xae,
	0x41, 0x80, 0x11, 0x24, 0xec, 0x9d, 0x99, 0x9c, 0x2d, 0xc0, 0x64, 0xe4, 0xc8, 0xc5, 0x0d, 0x32,
	0x3f, 0x38, 0xb5, 0xa8, 0x2c, 0x33, 0x39, 0x55, 0xc8, 0x88, 0x8b, 0x2d, 0xb8, 0xa4, 0x28, 0x35,
	0x31, 0x57, 0x48, 0x10, 0xc3, 0x76, 0x29, 0x4c, 0x21, 0x0d, 0x46, 0x03, 0xc6, 0x24, 0x36, 0xb0,
	0xa8, 0x31, 0x20, 0x00, 0x00, 0xff, 0xff, 0x49, 0xf9, 0xe9, 0xa6, 0xe3, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ChatServiceClient is the client API for ChatService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ChatServiceClient interface {
	// 透传消息, 双向流
	Stream(ctx context.Context, opts ...grpc.CallOption) (ChatService_StreamClient, error)
}

type chatServiceClient struct {
	cc *grpc.ClientConn
}

func NewChatServiceClient(cc *grpc.ClientConn) ChatServiceClient {
	return &chatServiceClient{cc}
}

func (c *chatServiceClient) Stream(ctx context.Context, opts ...grpc.CallOption) (ChatService_StreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ChatService_serviceDesc.Streams[0], "/proto.ChatService/Stream", opts...)
	if err != nil {
		return nil, err
	}
	x := &chatServiceStreamClient{stream}
	return x, nil
}

type ChatService_StreamClient interface {
	Send(*Chat_Frame) error
	Recv() (*Chat_Frame, error)
	grpc.ClientStream
}

type chatServiceStreamClient struct {
	grpc.ClientStream
}

func (x *chatServiceStreamClient) Send(m *Chat_Frame) error {
	return x.ClientStream.SendMsg(m)
}

func (x *chatServiceStreamClient) Recv() (*Chat_Frame, error) {
	m := new(Chat_Frame)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ChatServiceServer is the server API for ChatService service.
type ChatServiceServer interface {
	// 透传消息, 双向流
	Stream(ChatService_StreamServer) error
}

func RegisterChatServiceServer(s *grpc.Server, srv ChatServiceServer) {
	s.RegisterService(&_ChatService_serviceDesc, srv)
}

func _ChatService_Stream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ChatServiceServer).Stream(&chatServiceStreamServer{stream})
}

type ChatService_StreamServer interface {
	Send(*Chat_Frame) error
	Recv() (*Chat_Frame, error)
	grpc.ServerStream
}

type chatServiceStreamServer struct {
	grpc.ServerStream
}

func (x *chatServiceStreamServer) Send(m *Chat_Frame) error {
	return x.ServerStream.SendMsg(m)
}

func (x *chatServiceStreamServer) Recv() (*Chat_Frame, error) {
	m := new(Chat_Frame)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _ChatService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.ChatService",
	HandlerType: (*ChatServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Stream",
			Handler:       _ChatService_Stream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "chat.proto",
}
